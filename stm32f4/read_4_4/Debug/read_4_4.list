
read_4_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ddc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08000f64  08000f64  00001f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ff4  08000ff4  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ff4  08000ff4  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ff4  08000ff4  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ff4  08000ff4  00001ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ff8  08000ff8  00001ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000ffc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000205c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000205c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000205c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000996  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000346  00000000  00000000  00002a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00002d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c5  00000000  00000000  00002e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cd0  00000000  00000000  00002f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001561  00000000  00000000  00005c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097eb  00000000  00000000  0000717e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010969  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009fc  00000000  00000000  000109ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000113a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f4c 	.word	0x08000f4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08000f4c 	.word	0x08000f4c

080001c8 <delay>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<300000;i++);
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <delay+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d9f8      	bls.n	80001d4 <delay+0xc>

}
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	000493df 	.word	0x000493df

080001f4 <main>:


int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
    /* Loop forever */
	uint32_t volatile * const pClkEnReg = (uint32_t *)(0x40023800 + 0x30);
 80001fa:	4b72      	ldr	r3, [pc, #456]	@ (80003c4 <main+0x1d0>)
 80001fc:	617b      	str	r3, [r7, #20]
	//enable clock

	uint32_t volatile * const pModeReg = (uint32_t *) (0x40020C00);
 80001fe:	4b72      	ldr	r3, [pc, #456]	@ (80003c8 <main+0x1d4>)
 8000200:	613b      	str	r3, [r7, #16]
	//enable mode register

	uint32_t volatile * const pdoutput = (uint32_t *)(0x40020C00+0x14);
 8000202:	4b72      	ldr	r3, [pc, #456]	@ (80003cc <main+0x1d8>)
 8000204:	60fb      	str	r3, [r7, #12]
	//output register

	uint32_t volatile * const pinput = (uint32_t *)(0x40020C00+0x10);
 8000206:	4b72      	ldr	r3, [pc, #456]	@ (80003d0 <main+0x1dc>)
 8000208:	60bb      	str	r3, [r7, #8]
	//input register

	uint32_t volatile * const pudreg = (uint32_t *)(0x40020C00+0x0C);
 800020a:	4b72      	ldr	r3, [pc, #456]	@ (80003d4 <main+0x1e0>)
 800020c:	607b      	str	r3, [r7, #4]
	//pull up down register


	//1. enable clock for gpiod peripheral clock
	 *pClkEnReg |= (1<<3);
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 0208 	orr.w	r2, r3, #8
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	601a      	str	r2, [r3, #0]

	//2. configure pd0,pd1,pd2,pd3 as output (rows)
	*pModeReg &= ~(0xFF << 0);
 800021a:	693b      	ldr	r3, [r7, #16]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	601a      	str	r2, [r3, #0]
	*pModeReg |= (0x55);
 8000226:	693b      	ldr	r3, [r7, #16]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 0255 	orr.w	r2, r3, #85	@ 0x55
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	601a      	str	r2, [r3, #0]

	//3. configure pd8,pd9,pd10 as input (columns)
	*pModeReg &= ~(0x3F << 16);
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800023a:	693b      	ldr	r3, [r7, #16]
 800023c:	601a      	str	r2, [r3, #0]

	//4. enable internal pull up reg & pull down reg
	*pudreg &= ~(0xFF << 16);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	601a      	str	r2, [r3, #0]
	*pudreg |= (0x15 << 16);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f443 12a8 	orr.w	r2, r3, #1376256	@ 0x150000
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	601a      	str	r2, [r3, #0]
while(1){

	//make all rows high
	*pdoutput |= 0x0F;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f043 020f 	orr.w	r2, r3, #15
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	601a      	str	r2, [r3, #0]

	//make r1 low(pd0)
	*pdoutput &= ~( 1 << 0);
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f023 0201 	bic.w	r2, r3, #1
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	601a      	str	r2, [r3, #0]

	//scan all columns
	//scan c1 pd8 is zero or not
	if(!(*pinput & (1<<8))){
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000276:	2b00      	cmp	r3, #0
 8000278:	d104      	bne.n	8000284 <main+0x90>
		delay();
 800027a:	f7ff ffa5 	bl	80001c8 <delay>
		printf("1 pressed\n");
 800027e:	4856      	ldr	r0, [pc, #344]	@ (80003d8 <main+0x1e4>)
 8000280:	f000 fad0 	bl	8000824 <puts>
	}

	//check if c2 pd9 is pressed
	if(!(*pinput & (1<<9))){
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800028c:	2b00      	cmp	r3, #0
 800028e:	d104      	bne.n	800029a <main+0xa6>
			delay();
 8000290:	f7ff ff9a 	bl	80001c8 <delay>
			printf("2 pressed\n");
 8000294:	4851      	ldr	r0, [pc, #324]	@ (80003dc <main+0x1e8>)
 8000296:	f000 fac5 	bl	8000824 <puts>
	}

	//check if c3 is pressed
	if(!(*pinput & (1<<10))){
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d104      	bne.n	80002b0 <main+0xbc>
				delay();
 80002a6:	f7ff ff8f 	bl	80001c8 <delay>
				printf("3 pressed\n");
 80002aa:	484d      	ldr	r0, [pc, #308]	@ (80003e0 <main+0x1ec>)
 80002ac:	f000 faba 	bl	8000824 <puts>
	}



	//make all rows high
		*pdoutput |= 0x0F;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f043 020f 	orr.w	r2, r3, #15
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	601a      	str	r2, [r3, #0]
//
//		//make r2 low(pd0)
		*pdoutput &= ~( 1 << 1);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f023 0202 	bic.w	r2, r3, #2
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	601a      	str	r2, [r3, #0]
//
//		//scan all columns
		//scan c1 pd8 is zero or not
		if(!(*pinput & (1<<8))){
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d104      	bne.n	80002de <main+0xea>
			delay();
 80002d4:	f7ff ff78 	bl	80001c8 <delay>
			printf("4 pressed\n");
 80002d8:	4842      	ldr	r0, [pc, #264]	@ (80003e4 <main+0x1f0>)
 80002da:	f000 faa3 	bl	8000824 <puts>
		}

		//check if c2 pd9 is pressed
		if(!(*pinput & (1<<9))){
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d104      	bne.n	80002f4 <main+0x100>
				delay();
 80002ea:	f7ff ff6d 	bl	80001c8 <delay>
				printf("5 pressed\n");
 80002ee:	483e      	ldr	r0, [pc, #248]	@ (80003e8 <main+0x1f4>)
 80002f0:	f000 fa98 	bl	8000824 <puts>
		}

		//check if c3 is pressed
		if(!(*pinput & (1<<10))){
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d104      	bne.n	800030a <main+0x116>
					delay();
 8000300:	f7ff ff62 	bl	80001c8 <delay>
					printf("6 pressed\n");
 8000304:	4839      	ldr	r0, [pc, #228]	@ (80003ec <main+0x1f8>)
 8000306:	f000 fa8d 	bl	8000824 <puts>




		//make all rows high
			*pdoutput |= 0x0F;
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f043 020f 	orr.w	r2, r3, #15
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	601a      	str	r2, [r3, #0]

			//make r3 low(pd0)
			*pdoutput &= ~( 1 << 2);
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f023 0204 	bic.w	r2, r3, #4
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	601a      	str	r2, [r3, #0]

			//scan all columns
			//scan c1 pd8 is zero or not
			if(!(*pinput & (1<<8))){
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800032a:	2b00      	cmp	r3, #0
 800032c:	d104      	bne.n	8000338 <main+0x144>
				delay();
 800032e:	f7ff ff4b 	bl	80001c8 <delay>
				printf("7 pressed\n");
 8000332:	482f      	ldr	r0, [pc, #188]	@ (80003f0 <main+0x1fc>)
 8000334:	f000 fa76 	bl	8000824 <puts>
			}

			//check if c2 pd9 is pressed
			if(!(*pinput & (1<<9))){
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000340:	2b00      	cmp	r3, #0
 8000342:	d104      	bne.n	800034e <main+0x15a>
					delay();
 8000344:	f7ff ff40 	bl	80001c8 <delay>
					printf("8 pressed\n");
 8000348:	482a      	ldr	r0, [pc, #168]	@ (80003f4 <main+0x200>)
 800034a:	f000 fa6b 	bl	8000824 <puts>
			}

			//check if c3 is pressed
			if(!(*pinput & (1<<10))){
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000356:	2b00      	cmp	r3, #0
 8000358:	d104      	bne.n	8000364 <main+0x170>
						delay();
 800035a:	f7ff ff35 	bl	80001c8 <delay>
						printf("9 pressed\n");
 800035e:	4826      	ldr	r0, [pc, #152]	@ (80003f8 <main+0x204>)
 8000360:	f000 fa60 	bl	8000824 <puts>
			}



			//make all rows high
						*pdoutput |= 0x0F;
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f043 020f 	orr.w	r2, r3, #15
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	601a      	str	r2, [r3, #0]

						//make r3 low(pd0)
						*pdoutput &= ~( 1 << 3);
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f023 0208 	bic.w	r2, r3, #8
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	601a      	str	r2, [r3, #0]

						//scan all columns
						//scan c1 pd8 is zero or not
						if(!(*pinput & (1<<8))){
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000384:	2b00      	cmp	r3, #0
 8000386:	d104      	bne.n	8000392 <main+0x19e>
							delay();
 8000388:	f7ff ff1e 	bl	80001c8 <delay>
							printf("* pressed\n");
 800038c:	481b      	ldr	r0, [pc, #108]	@ (80003fc <main+0x208>)
 800038e:	f000 fa49 	bl	8000824 <puts>
						}

						//check if c2 pd9 is pressed
						if(!(*pinput & (1<<9))){
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800039a:	2b00      	cmp	r3, #0
 800039c:	d104      	bne.n	80003a8 <main+0x1b4>
								delay();
 800039e:	f7ff ff13 	bl	80001c8 <delay>
								printf("0 pressed\n");
 80003a2:	4817      	ldr	r0, [pc, #92]	@ (8000400 <main+0x20c>)
 80003a4:	f000 fa3e 	bl	8000824 <puts>
						}

						//check if c3 is pressed
						if(!(*pinput & (1<<10))){
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	f47f af50 	bne.w	8000256 <main+0x62>
									delay();
 80003b6:	f7ff ff07 	bl	80001c8 <delay>
									printf("# pressed\n");
 80003ba:	4812      	ldr	r0, [pc, #72]	@ (8000404 <main+0x210>)
 80003bc:	f000 fa32 	bl	8000824 <puts>
	*pdoutput |= 0x0F;
 80003c0:	e749      	b.n	8000256 <main+0x62>
 80003c2:	bf00      	nop
 80003c4:	40023830 	.word	0x40023830
 80003c8:	40020c00 	.word	0x40020c00
 80003cc:	40020c14 	.word	0x40020c14
 80003d0:	40020c10 	.word	0x40020c10
 80003d4:	40020c0c 	.word	0x40020c0c
 80003d8:	08000f64 	.word	0x08000f64
 80003dc:	08000f70 	.word	0x08000f70
 80003e0:	08000f7c 	.word	0x08000f7c
 80003e4:	08000f88 	.word	0x08000f88
 80003e8:	08000f94 	.word	0x08000f94
 80003ec:	08000fa0 	.word	0x08000fa0
 80003f0:	08000fac 	.word	0x08000fac
 80003f4:	08000fb8 	.word	0x08000fb8
 80003f8:	08000fc4 	.word	0x08000fc4
 80003fc:	08000fd0 	.word	0x08000fd0
 8000400:	08000fdc 	.word	0x08000fdc
 8000404:	08000fe8 	.word	0x08000fe8

08000408 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000412:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <ITM_SendChar+0x48>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <ITM_SendChar+0x48>)
 8000418:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800041c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800041e:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <ITM_SendChar+0x4c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a0c      	ldr	r2, [pc, #48]	@ (8000454 <ITM_SendChar+0x4c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800042a:	bf00      	nop
 800042c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f8      	beq.n	800042c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800043a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	6013      	str	r3, [r2, #0]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	e000edfc 	.word	0xe000edfc
 8000454:	e0000e00 	.word	0xe0000e00

08000458 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	e00a      	b.n	8000480 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800046a:	f3af 8000 	nop.w
 800046e:	4601      	mov	r1, r0
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	60ba      	str	r2, [r7, #8]
 8000476:	b2ca      	uxtb	r2, r1
 8000478:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	3301      	adds	r3, #1
 800047e:	617b      	str	r3, [r7, #20]
 8000480:	697a      	ldr	r2, [r7, #20]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	429a      	cmp	r2, r3
 8000486:	dbf0      	blt.n	800046a <_read+0x12>
  }

  return len;
 8000488:	687b      	ldr	r3, [r7, #4]
}
 800048a:	4618      	mov	r0, r3
 800048c:	3718      	adds	r7, #24
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b086      	sub	sp, #24
 8000496:	af00      	add	r7, sp, #0
 8000498:	60f8      	str	r0, [r7, #12]
 800049a:	60b9      	str	r1, [r7, #8]
 800049c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
 80004a2:	e009      	b.n	80004b8 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	1c5a      	adds	r2, r3, #1
 80004a8:	60ba      	str	r2, [r7, #8]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff ffab 	bl	8000408 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	3301      	adds	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	697a      	ldr	r2, [r7, #20]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	429a      	cmp	r2, r3
 80004be:	dbf1      	blt.n	80004a4 <_write+0x12>
  }
  return len;
 80004c0:	687b      	ldr	r3, [r7, #4]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3718      	adds	r7, #24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <_close>:

int _close(int file)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
 80004ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004f2:	605a      	str	r2, [r3, #4]
  return 0;
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <_isatty>:

int _isatty(int file)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800050a:	2301      	movs	r3, #1
}
 800050c:	4618      	mov	r0, r3
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
	...

08000534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800053c:	4a14      	ldr	r2, [pc, #80]	@ (8000590 <_sbrk+0x5c>)
 800053e:	4b15      	ldr	r3, [pc, #84]	@ (8000594 <_sbrk+0x60>)
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000548:	4b13      	ldr	r3, [pc, #76]	@ (8000598 <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d102      	bne.n	8000556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000550:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <_sbrk+0x64>)
 8000552:	4a12      	ldr	r2, [pc, #72]	@ (800059c <_sbrk+0x68>)
 8000554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000556:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <_sbrk+0x64>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	693a      	ldr	r2, [r7, #16]
 8000560:	429a      	cmp	r2, r3
 8000562:	d207      	bcs.n	8000574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000564:	f000 fa8c 	bl	8000a80 <__errno>
 8000568:	4603      	mov	r3, r0
 800056a:	220c      	movs	r2, #12
 800056c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	e009      	b.n	8000588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000574:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800057a:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	4a05      	ldr	r2, [pc, #20]	@ (8000598 <_sbrk+0x64>)
 8000584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000586:	68fb      	ldr	r3, [r7, #12]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20020000 	.word	0x20020000
 8000594:	00000400 	.word	0x00000400
 8000598:	20000078 	.word	0x20000078
 800059c:	200001c8 	.word	0x200001c8

080005a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a0:	480d      	ldr	r0, [pc, #52]	@ (80005d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	480c      	ldr	r0, [pc, #48]	@ (80005dc <LoopForever+0x6>)
  ldr r1, =_edata
 80005aa:	490d      	ldr	r1, [pc, #52]	@ (80005e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ac:	4a0d      	ldr	r2, [pc, #52]	@ (80005e4 <LoopForever+0xe>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a0a      	ldr	r2, [pc, #40]	@ (80005e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c0:	4c0a      	ldr	r4, [pc, #40]	@ (80005ec <LoopForever+0x16>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ce:	f000 fa5d 	bl	8000a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff fe0f 	bl	80001f4 <main>

080005d6 <LoopForever>:

LoopForever:
  b LoopForever
 80005d6:	e7fe      	b.n	80005d6 <LoopForever>
  ldr   r0, =_estack
 80005d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005e4:	08000ffc 	.word	0x08000ffc
  ldr r2, =_sbss
 80005e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005ec:	200001c8 	.word	0x200001c8

080005f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC_IRQHandler>
	...

080005f4 <std>:
 80005f4:	2300      	movs	r3, #0
 80005f6:	b510      	push	{r4, lr}
 80005f8:	4604      	mov	r4, r0
 80005fa:	e9c0 3300 	strd	r3, r3, [r0]
 80005fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000602:	6083      	str	r3, [r0, #8]
 8000604:	8181      	strh	r1, [r0, #12]
 8000606:	6643      	str	r3, [r0, #100]	@ 0x64
 8000608:	81c2      	strh	r2, [r0, #14]
 800060a:	6183      	str	r3, [r0, #24]
 800060c:	4619      	mov	r1, r3
 800060e:	2208      	movs	r2, #8
 8000610:	305c      	adds	r0, #92	@ 0x5c
 8000612:	f000 f9e7 	bl	80009e4 <memset>
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <std+0x58>)
 8000618:	6263      	str	r3, [r4, #36]	@ 0x24
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <std+0x5c>)
 800061c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800061e:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <std+0x60>)
 8000620:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000622:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <std+0x64>)
 8000624:	6323      	str	r3, [r4, #48]	@ 0x30
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <std+0x68>)
 8000628:	6224      	str	r4, [r4, #32]
 800062a:	429c      	cmp	r4, r3
 800062c:	d006      	beq.n	800063c <std+0x48>
 800062e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000632:	4294      	cmp	r4, r2
 8000634:	d002      	beq.n	800063c <std+0x48>
 8000636:	33d0      	adds	r3, #208	@ 0xd0
 8000638:	429c      	cmp	r4, r3
 800063a:	d105      	bne.n	8000648 <std+0x54>
 800063c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000644:	f000 ba46 	b.w	8000ad4 <__retarget_lock_init_recursive>
 8000648:	bd10      	pop	{r4, pc}
 800064a:	bf00      	nop
 800064c:	08000835 	.word	0x08000835
 8000650:	08000857 	.word	0x08000857
 8000654:	0800088f 	.word	0x0800088f
 8000658:	080008b3 	.word	0x080008b3
 800065c:	2000007c 	.word	0x2000007c

08000660 <stdio_exit_handler>:
 8000660:	4a02      	ldr	r2, [pc, #8]	@ (800066c <stdio_exit_handler+0xc>)
 8000662:	4903      	ldr	r1, [pc, #12]	@ (8000670 <stdio_exit_handler+0x10>)
 8000664:	4803      	ldr	r0, [pc, #12]	@ (8000674 <stdio_exit_handler+0x14>)
 8000666:	f000 b869 	b.w	800073c <_fwalk_sglue>
 800066a:	bf00      	nop
 800066c:	20000000 	.word	0x20000000
 8000670:	08000dd5 	.word	0x08000dd5
 8000674:	20000010 	.word	0x20000010

08000678 <cleanup_stdio>:
 8000678:	6841      	ldr	r1, [r0, #4]
 800067a:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <cleanup_stdio+0x34>)
 800067c:	4299      	cmp	r1, r3
 800067e:	b510      	push	{r4, lr}
 8000680:	4604      	mov	r4, r0
 8000682:	d001      	beq.n	8000688 <cleanup_stdio+0x10>
 8000684:	f000 fba6 	bl	8000dd4 <_fflush_r>
 8000688:	68a1      	ldr	r1, [r4, #8]
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <cleanup_stdio+0x38>)
 800068c:	4299      	cmp	r1, r3
 800068e:	d002      	beq.n	8000696 <cleanup_stdio+0x1e>
 8000690:	4620      	mov	r0, r4
 8000692:	f000 fb9f 	bl	8000dd4 <_fflush_r>
 8000696:	68e1      	ldr	r1, [r4, #12]
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <cleanup_stdio+0x3c>)
 800069a:	4299      	cmp	r1, r3
 800069c:	d004      	beq.n	80006a8 <cleanup_stdio+0x30>
 800069e:	4620      	mov	r0, r4
 80006a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a4:	f000 bb96 	b.w	8000dd4 <_fflush_r>
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	2000007c 	.word	0x2000007c
 80006b0:	200000e4 	.word	0x200000e4
 80006b4:	2000014c 	.word	0x2000014c

080006b8 <global_stdio_init.part.0>:
 80006b8:	b510      	push	{r4, lr}
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <global_stdio_init.part.0+0x30>)
 80006bc:	4c0b      	ldr	r4, [pc, #44]	@ (80006ec <global_stdio_init.part.0+0x34>)
 80006be:	4a0c      	ldr	r2, [pc, #48]	@ (80006f0 <global_stdio_init.part.0+0x38>)
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	4620      	mov	r0, r4
 80006c4:	2200      	movs	r2, #0
 80006c6:	2104      	movs	r1, #4
 80006c8:	f7ff ff94 	bl	80005f4 <std>
 80006cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006d0:	2201      	movs	r2, #1
 80006d2:	2109      	movs	r1, #9
 80006d4:	f7ff ff8e 	bl	80005f4 <std>
 80006d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006dc:	2202      	movs	r2, #2
 80006de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e2:	2112      	movs	r1, #18
 80006e4:	f7ff bf86 	b.w	80005f4 <std>
 80006e8:	200001b4 	.word	0x200001b4
 80006ec:	2000007c 	.word	0x2000007c
 80006f0:	08000661 	.word	0x08000661

080006f4 <__sfp_lock_acquire>:
 80006f4:	4801      	ldr	r0, [pc, #4]	@ (80006fc <__sfp_lock_acquire+0x8>)
 80006f6:	f000 b9ee 	b.w	8000ad6 <__retarget_lock_acquire_recursive>
 80006fa:	bf00      	nop
 80006fc:	200001bd 	.word	0x200001bd

08000700 <__sfp_lock_release>:
 8000700:	4801      	ldr	r0, [pc, #4]	@ (8000708 <__sfp_lock_release+0x8>)
 8000702:	f000 b9e9 	b.w	8000ad8 <__retarget_lock_release_recursive>
 8000706:	bf00      	nop
 8000708:	200001bd 	.word	0x200001bd

0800070c <__sinit>:
 800070c:	b510      	push	{r4, lr}
 800070e:	4604      	mov	r4, r0
 8000710:	f7ff fff0 	bl	80006f4 <__sfp_lock_acquire>
 8000714:	6a23      	ldr	r3, [r4, #32]
 8000716:	b11b      	cbz	r3, 8000720 <__sinit+0x14>
 8000718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800071c:	f7ff bff0 	b.w	8000700 <__sfp_lock_release>
 8000720:	4b04      	ldr	r3, [pc, #16]	@ (8000734 <__sinit+0x28>)
 8000722:	6223      	str	r3, [r4, #32]
 8000724:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <__sinit+0x2c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1f5      	bne.n	8000718 <__sinit+0xc>
 800072c:	f7ff ffc4 	bl	80006b8 <global_stdio_init.part.0>
 8000730:	e7f2      	b.n	8000718 <__sinit+0xc>
 8000732:	bf00      	nop
 8000734:	08000679 	.word	0x08000679
 8000738:	200001b4 	.word	0x200001b4

0800073c <_fwalk_sglue>:
 800073c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000740:	4607      	mov	r7, r0
 8000742:	4688      	mov	r8, r1
 8000744:	4614      	mov	r4, r2
 8000746:	2600      	movs	r6, #0
 8000748:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800074c:	f1b9 0901 	subs.w	r9, r9, #1
 8000750:	d505      	bpl.n	800075e <_fwalk_sglue+0x22>
 8000752:	6824      	ldr	r4, [r4, #0]
 8000754:	2c00      	cmp	r4, #0
 8000756:	d1f7      	bne.n	8000748 <_fwalk_sglue+0xc>
 8000758:	4630      	mov	r0, r6
 800075a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800075e:	89ab      	ldrh	r3, [r5, #12]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d907      	bls.n	8000774 <_fwalk_sglue+0x38>
 8000764:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000768:	3301      	adds	r3, #1
 800076a:	d003      	beq.n	8000774 <_fwalk_sglue+0x38>
 800076c:	4629      	mov	r1, r5
 800076e:	4638      	mov	r0, r7
 8000770:	47c0      	blx	r8
 8000772:	4306      	orrs	r6, r0
 8000774:	3568      	adds	r5, #104	@ 0x68
 8000776:	e7e9      	b.n	800074c <_fwalk_sglue+0x10>

08000778 <_puts_r>:
 8000778:	6a03      	ldr	r3, [r0, #32]
 800077a:	b570      	push	{r4, r5, r6, lr}
 800077c:	6884      	ldr	r4, [r0, #8]
 800077e:	4605      	mov	r5, r0
 8000780:	460e      	mov	r6, r1
 8000782:	b90b      	cbnz	r3, 8000788 <_puts_r+0x10>
 8000784:	f7ff ffc2 	bl	800070c <__sinit>
 8000788:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800078a:	07db      	lsls	r3, r3, #31
 800078c:	d405      	bmi.n	800079a <_puts_r+0x22>
 800078e:	89a3      	ldrh	r3, [r4, #12]
 8000790:	0598      	lsls	r0, r3, #22
 8000792:	d402      	bmi.n	800079a <_puts_r+0x22>
 8000794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000796:	f000 f99e 	bl	8000ad6 <__retarget_lock_acquire_recursive>
 800079a:	89a3      	ldrh	r3, [r4, #12]
 800079c:	0719      	lsls	r1, r3, #28
 800079e:	d502      	bpl.n	80007a6 <_puts_r+0x2e>
 80007a0:	6923      	ldr	r3, [r4, #16]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d135      	bne.n	8000812 <_puts_r+0x9a>
 80007a6:	4621      	mov	r1, r4
 80007a8:	4628      	mov	r0, r5
 80007aa:	f000 f8c5 	bl	8000938 <__swsetup_r>
 80007ae:	b380      	cbz	r0, 8000812 <_puts_r+0x9a>
 80007b0:	f04f 35ff 	mov.w	r5, #4294967295
 80007b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007b6:	07da      	lsls	r2, r3, #31
 80007b8:	d405      	bmi.n	80007c6 <_puts_r+0x4e>
 80007ba:	89a3      	ldrh	r3, [r4, #12]
 80007bc:	059b      	lsls	r3, r3, #22
 80007be:	d402      	bmi.n	80007c6 <_puts_r+0x4e>
 80007c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007c2:	f000 f989 	bl	8000ad8 <__retarget_lock_release_recursive>
 80007c6:	4628      	mov	r0, r5
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	da04      	bge.n	80007d8 <_puts_r+0x60>
 80007ce:	69a2      	ldr	r2, [r4, #24]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	dc17      	bgt.n	8000804 <_puts_r+0x8c>
 80007d4:	290a      	cmp	r1, #10
 80007d6:	d015      	beq.n	8000804 <_puts_r+0x8c>
 80007d8:	6823      	ldr	r3, [r4, #0]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	6022      	str	r2, [r4, #0]
 80007de:	7019      	strb	r1, [r3, #0]
 80007e0:	68a3      	ldr	r3, [r4, #8]
 80007e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007e6:	3b01      	subs	r3, #1
 80007e8:	60a3      	str	r3, [r4, #8]
 80007ea:	2900      	cmp	r1, #0
 80007ec:	d1ed      	bne.n	80007ca <_puts_r+0x52>
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	da11      	bge.n	8000816 <_puts_r+0x9e>
 80007f2:	4622      	mov	r2, r4
 80007f4:	210a      	movs	r1, #10
 80007f6:	4628      	mov	r0, r5
 80007f8:	f000 f85f 	bl	80008ba <__swbuf_r>
 80007fc:	3001      	adds	r0, #1
 80007fe:	d0d7      	beq.n	80007b0 <_puts_r+0x38>
 8000800:	250a      	movs	r5, #10
 8000802:	e7d7      	b.n	80007b4 <_puts_r+0x3c>
 8000804:	4622      	mov	r2, r4
 8000806:	4628      	mov	r0, r5
 8000808:	f000 f857 	bl	80008ba <__swbuf_r>
 800080c:	3001      	adds	r0, #1
 800080e:	d1e7      	bne.n	80007e0 <_puts_r+0x68>
 8000810:	e7ce      	b.n	80007b0 <_puts_r+0x38>
 8000812:	3e01      	subs	r6, #1
 8000814:	e7e4      	b.n	80007e0 <_puts_r+0x68>
 8000816:	6823      	ldr	r3, [r4, #0]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	6022      	str	r2, [r4, #0]
 800081c:	220a      	movs	r2, #10
 800081e:	701a      	strb	r2, [r3, #0]
 8000820:	e7ee      	b.n	8000800 <_puts_r+0x88>
	...

08000824 <puts>:
 8000824:	4b02      	ldr	r3, [pc, #8]	@ (8000830 <puts+0xc>)
 8000826:	4601      	mov	r1, r0
 8000828:	6818      	ldr	r0, [r3, #0]
 800082a:	f7ff bfa5 	b.w	8000778 <_puts_r>
 800082e:	bf00      	nop
 8000830:	2000000c 	.word	0x2000000c

08000834 <__sread>:
 8000834:	b510      	push	{r4, lr}
 8000836:	460c      	mov	r4, r1
 8000838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800083c:	f000 f8fc 	bl	8000a38 <_read_r>
 8000840:	2800      	cmp	r0, #0
 8000842:	bfab      	itete	ge
 8000844:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000846:	89a3      	ldrhlt	r3, [r4, #12]
 8000848:	181b      	addge	r3, r3, r0
 800084a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800084e:	bfac      	ite	ge
 8000850:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000852:	81a3      	strhlt	r3, [r4, #12]
 8000854:	bd10      	pop	{r4, pc}

08000856 <__swrite>:
 8000856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800085a:	461f      	mov	r7, r3
 800085c:	898b      	ldrh	r3, [r1, #12]
 800085e:	05db      	lsls	r3, r3, #23
 8000860:	4605      	mov	r5, r0
 8000862:	460c      	mov	r4, r1
 8000864:	4616      	mov	r6, r2
 8000866:	d505      	bpl.n	8000874 <__swrite+0x1e>
 8000868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800086c:	2302      	movs	r3, #2
 800086e:	2200      	movs	r2, #0
 8000870:	f000 f8d0 	bl	8000a14 <_lseek_r>
 8000874:	89a3      	ldrh	r3, [r4, #12]
 8000876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800087a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800087e:	81a3      	strh	r3, [r4, #12]
 8000880:	4632      	mov	r2, r6
 8000882:	463b      	mov	r3, r7
 8000884:	4628      	mov	r0, r5
 8000886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800088a:	f000 b8e7 	b.w	8000a5c <_write_r>

0800088e <__sseek>:
 800088e:	b510      	push	{r4, lr}
 8000890:	460c      	mov	r4, r1
 8000892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000896:	f000 f8bd 	bl	8000a14 <_lseek_r>
 800089a:	1c43      	adds	r3, r0, #1
 800089c:	89a3      	ldrh	r3, [r4, #12]
 800089e:	bf15      	itete	ne
 80008a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008aa:	81a3      	strheq	r3, [r4, #12]
 80008ac:	bf18      	it	ne
 80008ae:	81a3      	strhne	r3, [r4, #12]
 80008b0:	bd10      	pop	{r4, pc}

080008b2 <__sclose>:
 80008b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008b6:	f000 b89d 	b.w	80009f4 <_close_r>

080008ba <__swbuf_r>:
 80008ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008bc:	460e      	mov	r6, r1
 80008be:	4614      	mov	r4, r2
 80008c0:	4605      	mov	r5, r0
 80008c2:	b118      	cbz	r0, 80008cc <__swbuf_r+0x12>
 80008c4:	6a03      	ldr	r3, [r0, #32]
 80008c6:	b90b      	cbnz	r3, 80008cc <__swbuf_r+0x12>
 80008c8:	f7ff ff20 	bl	800070c <__sinit>
 80008cc:	69a3      	ldr	r3, [r4, #24]
 80008ce:	60a3      	str	r3, [r4, #8]
 80008d0:	89a3      	ldrh	r3, [r4, #12]
 80008d2:	071a      	lsls	r2, r3, #28
 80008d4:	d501      	bpl.n	80008da <__swbuf_r+0x20>
 80008d6:	6923      	ldr	r3, [r4, #16]
 80008d8:	b943      	cbnz	r3, 80008ec <__swbuf_r+0x32>
 80008da:	4621      	mov	r1, r4
 80008dc:	4628      	mov	r0, r5
 80008de:	f000 f82b 	bl	8000938 <__swsetup_r>
 80008e2:	b118      	cbz	r0, 80008ec <__swbuf_r+0x32>
 80008e4:	f04f 37ff 	mov.w	r7, #4294967295
 80008e8:	4638      	mov	r0, r7
 80008ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ec:	6823      	ldr	r3, [r4, #0]
 80008ee:	6922      	ldr	r2, [r4, #16]
 80008f0:	1a98      	subs	r0, r3, r2
 80008f2:	6963      	ldr	r3, [r4, #20]
 80008f4:	b2f6      	uxtb	r6, r6
 80008f6:	4283      	cmp	r3, r0
 80008f8:	4637      	mov	r7, r6
 80008fa:	dc05      	bgt.n	8000908 <__swbuf_r+0x4e>
 80008fc:	4621      	mov	r1, r4
 80008fe:	4628      	mov	r0, r5
 8000900:	f000 fa68 	bl	8000dd4 <_fflush_r>
 8000904:	2800      	cmp	r0, #0
 8000906:	d1ed      	bne.n	80008e4 <__swbuf_r+0x2a>
 8000908:	68a3      	ldr	r3, [r4, #8]
 800090a:	3b01      	subs	r3, #1
 800090c:	60a3      	str	r3, [r4, #8]
 800090e:	6823      	ldr	r3, [r4, #0]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	6022      	str	r2, [r4, #0]
 8000914:	701e      	strb	r6, [r3, #0]
 8000916:	6962      	ldr	r2, [r4, #20]
 8000918:	1c43      	adds	r3, r0, #1
 800091a:	429a      	cmp	r2, r3
 800091c:	d004      	beq.n	8000928 <__swbuf_r+0x6e>
 800091e:	89a3      	ldrh	r3, [r4, #12]
 8000920:	07db      	lsls	r3, r3, #31
 8000922:	d5e1      	bpl.n	80008e8 <__swbuf_r+0x2e>
 8000924:	2e0a      	cmp	r6, #10
 8000926:	d1df      	bne.n	80008e8 <__swbuf_r+0x2e>
 8000928:	4621      	mov	r1, r4
 800092a:	4628      	mov	r0, r5
 800092c:	f000 fa52 	bl	8000dd4 <_fflush_r>
 8000930:	2800      	cmp	r0, #0
 8000932:	d0d9      	beq.n	80008e8 <__swbuf_r+0x2e>
 8000934:	e7d6      	b.n	80008e4 <__swbuf_r+0x2a>
	...

08000938 <__swsetup_r>:
 8000938:	b538      	push	{r3, r4, r5, lr}
 800093a:	4b29      	ldr	r3, [pc, #164]	@ (80009e0 <__swsetup_r+0xa8>)
 800093c:	4605      	mov	r5, r0
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	460c      	mov	r4, r1
 8000942:	b118      	cbz	r0, 800094c <__swsetup_r+0x14>
 8000944:	6a03      	ldr	r3, [r0, #32]
 8000946:	b90b      	cbnz	r3, 800094c <__swsetup_r+0x14>
 8000948:	f7ff fee0 	bl	800070c <__sinit>
 800094c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000950:	0719      	lsls	r1, r3, #28
 8000952:	d422      	bmi.n	800099a <__swsetup_r+0x62>
 8000954:	06da      	lsls	r2, r3, #27
 8000956:	d407      	bmi.n	8000968 <__swsetup_r+0x30>
 8000958:	2209      	movs	r2, #9
 800095a:	602a      	str	r2, [r5, #0]
 800095c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000960:	81a3      	strh	r3, [r4, #12]
 8000962:	f04f 30ff 	mov.w	r0, #4294967295
 8000966:	e033      	b.n	80009d0 <__swsetup_r+0x98>
 8000968:	0758      	lsls	r0, r3, #29
 800096a:	d512      	bpl.n	8000992 <__swsetup_r+0x5a>
 800096c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800096e:	b141      	cbz	r1, 8000982 <__swsetup_r+0x4a>
 8000970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000974:	4299      	cmp	r1, r3
 8000976:	d002      	beq.n	800097e <__swsetup_r+0x46>
 8000978:	4628      	mov	r0, r5
 800097a:	f000 f8af 	bl	8000adc <_free_r>
 800097e:	2300      	movs	r3, #0
 8000980:	6363      	str	r3, [r4, #52]	@ 0x34
 8000982:	89a3      	ldrh	r3, [r4, #12]
 8000984:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000988:	81a3      	strh	r3, [r4, #12]
 800098a:	2300      	movs	r3, #0
 800098c:	6063      	str	r3, [r4, #4]
 800098e:	6923      	ldr	r3, [r4, #16]
 8000990:	6023      	str	r3, [r4, #0]
 8000992:	89a3      	ldrh	r3, [r4, #12]
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	81a3      	strh	r3, [r4, #12]
 800099a:	6923      	ldr	r3, [r4, #16]
 800099c:	b94b      	cbnz	r3, 80009b2 <__swsetup_r+0x7a>
 800099e:	89a3      	ldrh	r3, [r4, #12]
 80009a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80009a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009a8:	d003      	beq.n	80009b2 <__swsetup_r+0x7a>
 80009aa:	4621      	mov	r1, r4
 80009ac:	4628      	mov	r0, r5
 80009ae:	f000 fa5f 	bl	8000e70 <__smakebuf_r>
 80009b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009b6:	f013 0201 	ands.w	r2, r3, #1
 80009ba:	d00a      	beq.n	80009d2 <__swsetup_r+0x9a>
 80009bc:	2200      	movs	r2, #0
 80009be:	60a2      	str	r2, [r4, #8]
 80009c0:	6962      	ldr	r2, [r4, #20]
 80009c2:	4252      	negs	r2, r2
 80009c4:	61a2      	str	r2, [r4, #24]
 80009c6:	6922      	ldr	r2, [r4, #16]
 80009c8:	b942      	cbnz	r2, 80009dc <__swsetup_r+0xa4>
 80009ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80009ce:	d1c5      	bne.n	800095c <__swsetup_r+0x24>
 80009d0:	bd38      	pop	{r3, r4, r5, pc}
 80009d2:	0799      	lsls	r1, r3, #30
 80009d4:	bf58      	it	pl
 80009d6:	6962      	ldrpl	r2, [r4, #20]
 80009d8:	60a2      	str	r2, [r4, #8]
 80009da:	e7f4      	b.n	80009c6 <__swsetup_r+0x8e>
 80009dc:	2000      	movs	r0, #0
 80009de:	e7f7      	b.n	80009d0 <__swsetup_r+0x98>
 80009e0:	2000000c 	.word	0x2000000c

080009e4 <memset>:
 80009e4:	4402      	add	r2, r0
 80009e6:	4603      	mov	r3, r0
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d100      	bne.n	80009ee <memset+0xa>
 80009ec:	4770      	bx	lr
 80009ee:	f803 1b01 	strb.w	r1, [r3], #1
 80009f2:	e7f9      	b.n	80009e8 <memset+0x4>

080009f4 <_close_r>:
 80009f4:	b538      	push	{r3, r4, r5, lr}
 80009f6:	4d06      	ldr	r5, [pc, #24]	@ (8000a10 <_close_r+0x1c>)
 80009f8:	2300      	movs	r3, #0
 80009fa:	4604      	mov	r4, r0
 80009fc:	4608      	mov	r0, r1
 80009fe:	602b      	str	r3, [r5, #0]
 8000a00:	f7ff fd63 	bl	80004ca <_close>
 8000a04:	1c43      	adds	r3, r0, #1
 8000a06:	d102      	bne.n	8000a0e <_close_r+0x1a>
 8000a08:	682b      	ldr	r3, [r5, #0]
 8000a0a:	b103      	cbz	r3, 8000a0e <_close_r+0x1a>
 8000a0c:	6023      	str	r3, [r4, #0]
 8000a0e:	bd38      	pop	{r3, r4, r5, pc}
 8000a10:	200001b8 	.word	0x200001b8

08000a14 <_lseek_r>:
 8000a14:	b538      	push	{r3, r4, r5, lr}
 8000a16:	4d07      	ldr	r5, [pc, #28]	@ (8000a34 <_lseek_r+0x20>)
 8000a18:	4604      	mov	r4, r0
 8000a1a:	4608      	mov	r0, r1
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	2200      	movs	r2, #0
 8000a20:	602a      	str	r2, [r5, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	f7ff fd78 	bl	8000518 <_lseek>
 8000a28:	1c43      	adds	r3, r0, #1
 8000a2a:	d102      	bne.n	8000a32 <_lseek_r+0x1e>
 8000a2c:	682b      	ldr	r3, [r5, #0]
 8000a2e:	b103      	cbz	r3, 8000a32 <_lseek_r+0x1e>
 8000a30:	6023      	str	r3, [r4, #0]
 8000a32:	bd38      	pop	{r3, r4, r5, pc}
 8000a34:	200001b8 	.word	0x200001b8

08000a38 <_read_r>:
 8000a38:	b538      	push	{r3, r4, r5, lr}
 8000a3a:	4d07      	ldr	r5, [pc, #28]	@ (8000a58 <_read_r+0x20>)
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	4608      	mov	r0, r1
 8000a40:	4611      	mov	r1, r2
 8000a42:	2200      	movs	r2, #0
 8000a44:	602a      	str	r2, [r5, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	f7ff fd06 	bl	8000458 <_read>
 8000a4c:	1c43      	adds	r3, r0, #1
 8000a4e:	d102      	bne.n	8000a56 <_read_r+0x1e>
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	b103      	cbz	r3, 8000a56 <_read_r+0x1e>
 8000a54:	6023      	str	r3, [r4, #0]
 8000a56:	bd38      	pop	{r3, r4, r5, pc}
 8000a58:	200001b8 	.word	0x200001b8

08000a5c <_write_r>:
 8000a5c:	b538      	push	{r3, r4, r5, lr}
 8000a5e:	4d07      	ldr	r5, [pc, #28]	@ (8000a7c <_write_r+0x20>)
 8000a60:	4604      	mov	r4, r0
 8000a62:	4608      	mov	r0, r1
 8000a64:	4611      	mov	r1, r2
 8000a66:	2200      	movs	r2, #0
 8000a68:	602a      	str	r2, [r5, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	f7ff fd11 	bl	8000492 <_write>
 8000a70:	1c43      	adds	r3, r0, #1
 8000a72:	d102      	bne.n	8000a7a <_write_r+0x1e>
 8000a74:	682b      	ldr	r3, [r5, #0]
 8000a76:	b103      	cbz	r3, 8000a7a <_write_r+0x1e>
 8000a78:	6023      	str	r3, [r4, #0]
 8000a7a:	bd38      	pop	{r3, r4, r5, pc}
 8000a7c:	200001b8 	.word	0x200001b8

08000a80 <__errno>:
 8000a80:	4b01      	ldr	r3, [pc, #4]	@ (8000a88 <__errno+0x8>)
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	2000000c 	.word	0x2000000c

08000a8c <__libc_init_array>:
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8000ac4 <__libc_init_array+0x38>)
 8000a90:	4c0d      	ldr	r4, [pc, #52]	@ (8000ac8 <__libc_init_array+0x3c>)
 8000a92:	1b64      	subs	r4, r4, r5
 8000a94:	10a4      	asrs	r4, r4, #2
 8000a96:	2600      	movs	r6, #0
 8000a98:	42a6      	cmp	r6, r4
 8000a9a:	d109      	bne.n	8000ab0 <__libc_init_array+0x24>
 8000a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8000acc <__libc_init_array+0x40>)
 8000a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8000ad0 <__libc_init_array+0x44>)
 8000aa0:	f000 fa54 	bl	8000f4c <_init>
 8000aa4:	1b64      	subs	r4, r4, r5
 8000aa6:	10a4      	asrs	r4, r4, #2
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	42a6      	cmp	r6, r4
 8000aac:	d105      	bne.n	8000aba <__libc_init_array+0x2e>
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab4:	4798      	blx	r3
 8000ab6:	3601      	adds	r6, #1
 8000ab8:	e7ee      	b.n	8000a98 <__libc_init_array+0xc>
 8000aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000abe:	4798      	blx	r3
 8000ac0:	3601      	adds	r6, #1
 8000ac2:	e7f2      	b.n	8000aaa <__libc_init_array+0x1e>
 8000ac4:	08000ff4 	.word	0x08000ff4
 8000ac8:	08000ff4 	.word	0x08000ff4
 8000acc:	08000ff4 	.word	0x08000ff4
 8000ad0:	08000ff8 	.word	0x08000ff8

08000ad4 <__retarget_lock_init_recursive>:
 8000ad4:	4770      	bx	lr

08000ad6 <__retarget_lock_acquire_recursive>:
 8000ad6:	4770      	bx	lr

08000ad8 <__retarget_lock_release_recursive>:
 8000ad8:	4770      	bx	lr
	...

08000adc <_free_r>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4605      	mov	r5, r0
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	d041      	beq.n	8000b68 <_free_r+0x8c>
 8000ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ae8:	1f0c      	subs	r4, r1, #4
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bfb8      	it	lt
 8000aee:	18e4      	addlt	r4, r4, r3
 8000af0:	f000 f8e0 	bl	8000cb4 <__malloc_lock>
 8000af4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b6c <_free_r+0x90>)
 8000af6:	6813      	ldr	r3, [r2, #0]
 8000af8:	b933      	cbnz	r3, 8000b08 <_free_r+0x2c>
 8000afa:	6063      	str	r3, [r4, #4]
 8000afc:	6014      	str	r4, [r2, #0]
 8000afe:	4628      	mov	r0, r5
 8000b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b04:	f000 b8dc 	b.w	8000cc0 <__malloc_unlock>
 8000b08:	42a3      	cmp	r3, r4
 8000b0a:	d908      	bls.n	8000b1e <_free_r+0x42>
 8000b0c:	6820      	ldr	r0, [r4, #0]
 8000b0e:	1821      	adds	r1, r4, r0
 8000b10:	428b      	cmp	r3, r1
 8000b12:	bf01      	itttt	eq
 8000b14:	6819      	ldreq	r1, [r3, #0]
 8000b16:	685b      	ldreq	r3, [r3, #4]
 8000b18:	1809      	addeq	r1, r1, r0
 8000b1a:	6021      	streq	r1, [r4, #0]
 8000b1c:	e7ed      	b.n	8000afa <_free_r+0x1e>
 8000b1e:	461a      	mov	r2, r3
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	b10b      	cbz	r3, 8000b28 <_free_r+0x4c>
 8000b24:	42a3      	cmp	r3, r4
 8000b26:	d9fa      	bls.n	8000b1e <_free_r+0x42>
 8000b28:	6811      	ldr	r1, [r2, #0]
 8000b2a:	1850      	adds	r0, r2, r1
 8000b2c:	42a0      	cmp	r0, r4
 8000b2e:	d10b      	bne.n	8000b48 <_free_r+0x6c>
 8000b30:	6820      	ldr	r0, [r4, #0]
 8000b32:	4401      	add	r1, r0
 8000b34:	1850      	adds	r0, r2, r1
 8000b36:	4283      	cmp	r3, r0
 8000b38:	6011      	str	r1, [r2, #0]
 8000b3a:	d1e0      	bne.n	8000afe <_free_r+0x22>
 8000b3c:	6818      	ldr	r0, [r3, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	6053      	str	r3, [r2, #4]
 8000b42:	4408      	add	r0, r1
 8000b44:	6010      	str	r0, [r2, #0]
 8000b46:	e7da      	b.n	8000afe <_free_r+0x22>
 8000b48:	d902      	bls.n	8000b50 <_free_r+0x74>
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	602b      	str	r3, [r5, #0]
 8000b4e:	e7d6      	b.n	8000afe <_free_r+0x22>
 8000b50:	6820      	ldr	r0, [r4, #0]
 8000b52:	1821      	adds	r1, r4, r0
 8000b54:	428b      	cmp	r3, r1
 8000b56:	bf04      	itt	eq
 8000b58:	6819      	ldreq	r1, [r3, #0]
 8000b5a:	685b      	ldreq	r3, [r3, #4]
 8000b5c:	6063      	str	r3, [r4, #4]
 8000b5e:	bf04      	itt	eq
 8000b60:	1809      	addeq	r1, r1, r0
 8000b62:	6021      	streq	r1, [r4, #0]
 8000b64:	6054      	str	r4, [r2, #4]
 8000b66:	e7ca      	b.n	8000afe <_free_r+0x22>
 8000b68:	bd38      	pop	{r3, r4, r5, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200001c4 	.word	0x200001c4

08000b70 <sbrk_aligned>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	4e0f      	ldr	r6, [pc, #60]	@ (8000bb0 <sbrk_aligned+0x40>)
 8000b74:	460c      	mov	r4, r1
 8000b76:	6831      	ldr	r1, [r6, #0]
 8000b78:	4605      	mov	r5, r0
 8000b7a:	b911      	cbnz	r1, 8000b82 <sbrk_aligned+0x12>
 8000b7c:	f000 f9d6 	bl	8000f2c <_sbrk_r>
 8000b80:	6030      	str	r0, [r6, #0]
 8000b82:	4621      	mov	r1, r4
 8000b84:	4628      	mov	r0, r5
 8000b86:	f000 f9d1 	bl	8000f2c <_sbrk_r>
 8000b8a:	1c43      	adds	r3, r0, #1
 8000b8c:	d103      	bne.n	8000b96 <sbrk_aligned+0x26>
 8000b8e:	f04f 34ff 	mov.w	r4, #4294967295
 8000b92:	4620      	mov	r0, r4
 8000b94:	bd70      	pop	{r4, r5, r6, pc}
 8000b96:	1cc4      	adds	r4, r0, #3
 8000b98:	f024 0403 	bic.w	r4, r4, #3
 8000b9c:	42a0      	cmp	r0, r4
 8000b9e:	d0f8      	beq.n	8000b92 <sbrk_aligned+0x22>
 8000ba0:	1a21      	subs	r1, r4, r0
 8000ba2:	4628      	mov	r0, r5
 8000ba4:	f000 f9c2 	bl	8000f2c <_sbrk_r>
 8000ba8:	3001      	adds	r0, #1
 8000baa:	d1f2      	bne.n	8000b92 <sbrk_aligned+0x22>
 8000bac:	e7ef      	b.n	8000b8e <sbrk_aligned+0x1e>
 8000bae:	bf00      	nop
 8000bb0:	200001c0 	.word	0x200001c0

08000bb4 <_malloc_r>:
 8000bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bb8:	1ccd      	adds	r5, r1, #3
 8000bba:	f025 0503 	bic.w	r5, r5, #3
 8000bbe:	3508      	adds	r5, #8
 8000bc0:	2d0c      	cmp	r5, #12
 8000bc2:	bf38      	it	cc
 8000bc4:	250c      	movcc	r5, #12
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	4606      	mov	r6, r0
 8000bca:	db01      	blt.n	8000bd0 <_malloc_r+0x1c>
 8000bcc:	42a9      	cmp	r1, r5
 8000bce:	d904      	bls.n	8000bda <_malloc_r+0x26>
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	6033      	str	r3, [r6, #0]
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cb0 <_malloc_r+0xfc>
 8000bde:	f000 f869 	bl	8000cb4 <__malloc_lock>
 8000be2:	f8d8 3000 	ldr.w	r3, [r8]
 8000be6:	461c      	mov	r4, r3
 8000be8:	bb44      	cbnz	r4, 8000c3c <_malloc_r+0x88>
 8000bea:	4629      	mov	r1, r5
 8000bec:	4630      	mov	r0, r6
 8000bee:	f7ff ffbf 	bl	8000b70 <sbrk_aligned>
 8000bf2:	1c43      	adds	r3, r0, #1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	d158      	bne.n	8000caa <_malloc_r+0xf6>
 8000bf8:	f8d8 4000 	ldr.w	r4, [r8]
 8000bfc:	4627      	mov	r7, r4
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d143      	bne.n	8000c8a <_malloc_r+0xd6>
 8000c02:	2c00      	cmp	r4, #0
 8000c04:	d04b      	beq.n	8000c9e <_malloc_r+0xea>
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	4639      	mov	r1, r7
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	eb04 0903 	add.w	r9, r4, r3
 8000c10:	f000 f98c 	bl	8000f2c <_sbrk_r>
 8000c14:	4581      	cmp	r9, r0
 8000c16:	d142      	bne.n	8000c9e <_malloc_r+0xea>
 8000c18:	6821      	ldr	r1, [r4, #0]
 8000c1a:	1a6d      	subs	r5, r5, r1
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	4630      	mov	r0, r6
 8000c20:	f7ff ffa6 	bl	8000b70 <sbrk_aligned>
 8000c24:	3001      	adds	r0, #1
 8000c26:	d03a      	beq.n	8000c9e <_malloc_r+0xea>
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	442b      	add	r3, r5
 8000c2c:	6023      	str	r3, [r4, #0]
 8000c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	bb62      	cbnz	r2, 8000c90 <_malloc_r+0xdc>
 8000c36:	f8c8 7000 	str.w	r7, [r8]
 8000c3a:	e00f      	b.n	8000c5c <_malloc_r+0xa8>
 8000c3c:	6822      	ldr	r2, [r4, #0]
 8000c3e:	1b52      	subs	r2, r2, r5
 8000c40:	d420      	bmi.n	8000c84 <_malloc_r+0xd0>
 8000c42:	2a0b      	cmp	r2, #11
 8000c44:	d917      	bls.n	8000c76 <_malloc_r+0xc2>
 8000c46:	1961      	adds	r1, r4, r5
 8000c48:	42a3      	cmp	r3, r4
 8000c4a:	6025      	str	r5, [r4, #0]
 8000c4c:	bf18      	it	ne
 8000c4e:	6059      	strne	r1, [r3, #4]
 8000c50:	6863      	ldr	r3, [r4, #4]
 8000c52:	bf08      	it	eq
 8000c54:	f8c8 1000 	streq.w	r1, [r8]
 8000c58:	5162      	str	r2, [r4, r5]
 8000c5a:	604b      	str	r3, [r1, #4]
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	f000 f82f 	bl	8000cc0 <__malloc_unlock>
 8000c62:	f104 000b 	add.w	r0, r4, #11
 8000c66:	1d23      	adds	r3, r4, #4
 8000c68:	f020 0007 	bic.w	r0, r0, #7
 8000c6c:	1ac2      	subs	r2, r0, r3
 8000c6e:	bf1c      	itt	ne
 8000c70:	1a1b      	subne	r3, r3, r0
 8000c72:	50a3      	strne	r3, [r4, r2]
 8000c74:	e7af      	b.n	8000bd6 <_malloc_r+0x22>
 8000c76:	6862      	ldr	r2, [r4, #4]
 8000c78:	42a3      	cmp	r3, r4
 8000c7a:	bf0c      	ite	eq
 8000c7c:	f8c8 2000 	streq.w	r2, [r8]
 8000c80:	605a      	strne	r2, [r3, #4]
 8000c82:	e7eb      	b.n	8000c5c <_malloc_r+0xa8>
 8000c84:	4623      	mov	r3, r4
 8000c86:	6864      	ldr	r4, [r4, #4]
 8000c88:	e7ae      	b.n	8000be8 <_malloc_r+0x34>
 8000c8a:	463c      	mov	r4, r7
 8000c8c:	687f      	ldr	r7, [r7, #4]
 8000c8e:	e7b6      	b.n	8000bfe <_malloc_r+0x4a>
 8000c90:	461a      	mov	r2, r3
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d1fb      	bne.n	8000c90 <_malloc_r+0xdc>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	6053      	str	r3, [r2, #4]
 8000c9c:	e7de      	b.n	8000c5c <_malloc_r+0xa8>
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	6033      	str	r3, [r6, #0]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	f000 f80c 	bl	8000cc0 <__malloc_unlock>
 8000ca8:	e794      	b.n	8000bd4 <_malloc_r+0x20>
 8000caa:	6005      	str	r5, [r0, #0]
 8000cac:	e7d6      	b.n	8000c5c <_malloc_r+0xa8>
 8000cae:	bf00      	nop
 8000cb0:	200001c4 	.word	0x200001c4

08000cb4 <__malloc_lock>:
 8000cb4:	4801      	ldr	r0, [pc, #4]	@ (8000cbc <__malloc_lock+0x8>)
 8000cb6:	f7ff bf0e 	b.w	8000ad6 <__retarget_lock_acquire_recursive>
 8000cba:	bf00      	nop
 8000cbc:	200001bc 	.word	0x200001bc

08000cc0 <__malloc_unlock>:
 8000cc0:	4801      	ldr	r0, [pc, #4]	@ (8000cc8 <__malloc_unlock+0x8>)
 8000cc2:	f7ff bf09 	b.w	8000ad8 <__retarget_lock_release_recursive>
 8000cc6:	bf00      	nop
 8000cc8:	200001bc 	.word	0x200001bc

08000ccc <__sflush_r>:
 8000ccc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cd4:	0716      	lsls	r6, r2, #28
 8000cd6:	4605      	mov	r5, r0
 8000cd8:	460c      	mov	r4, r1
 8000cda:	d454      	bmi.n	8000d86 <__sflush_r+0xba>
 8000cdc:	684b      	ldr	r3, [r1, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	dc02      	bgt.n	8000ce8 <__sflush_r+0x1c>
 8000ce2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	dd48      	ble.n	8000d7a <__sflush_r+0xae>
 8000ce8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d045      	beq.n	8000d7a <__sflush_r+0xae>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000cf4:	682f      	ldr	r7, [r5, #0]
 8000cf6:	6a21      	ldr	r1, [r4, #32]
 8000cf8:	602b      	str	r3, [r5, #0]
 8000cfa:	d030      	beq.n	8000d5e <__sflush_r+0x92>
 8000cfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000cfe:	89a3      	ldrh	r3, [r4, #12]
 8000d00:	0759      	lsls	r1, r3, #29
 8000d02:	d505      	bpl.n	8000d10 <__sflush_r+0x44>
 8000d04:	6863      	ldr	r3, [r4, #4]
 8000d06:	1ad2      	subs	r2, r2, r3
 8000d08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000d0a:	b10b      	cbz	r3, 8000d10 <__sflush_r+0x44>
 8000d0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000d0e:	1ad2      	subs	r2, r2, r3
 8000d10:	2300      	movs	r3, #0
 8000d12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d14:	6a21      	ldr	r1, [r4, #32]
 8000d16:	4628      	mov	r0, r5
 8000d18:	47b0      	blx	r6
 8000d1a:	1c43      	adds	r3, r0, #1
 8000d1c:	89a3      	ldrh	r3, [r4, #12]
 8000d1e:	d106      	bne.n	8000d2e <__sflush_r+0x62>
 8000d20:	6829      	ldr	r1, [r5, #0]
 8000d22:	291d      	cmp	r1, #29
 8000d24:	d82b      	bhi.n	8000d7e <__sflush_r+0xb2>
 8000d26:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd0 <__sflush_r+0x104>)
 8000d28:	410a      	asrs	r2, r1
 8000d2a:	07d6      	lsls	r6, r2, #31
 8000d2c:	d427      	bmi.n	8000d7e <__sflush_r+0xb2>
 8000d2e:	2200      	movs	r2, #0
 8000d30:	6062      	str	r2, [r4, #4]
 8000d32:	04d9      	lsls	r1, r3, #19
 8000d34:	6922      	ldr	r2, [r4, #16]
 8000d36:	6022      	str	r2, [r4, #0]
 8000d38:	d504      	bpl.n	8000d44 <__sflush_r+0x78>
 8000d3a:	1c42      	adds	r2, r0, #1
 8000d3c:	d101      	bne.n	8000d42 <__sflush_r+0x76>
 8000d3e:	682b      	ldr	r3, [r5, #0]
 8000d40:	b903      	cbnz	r3, 8000d44 <__sflush_r+0x78>
 8000d42:	6560      	str	r0, [r4, #84]	@ 0x54
 8000d44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d46:	602f      	str	r7, [r5, #0]
 8000d48:	b1b9      	cbz	r1, 8000d7a <__sflush_r+0xae>
 8000d4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	d002      	beq.n	8000d58 <__sflush_r+0x8c>
 8000d52:	4628      	mov	r0, r5
 8000d54:	f7ff fec2 	bl	8000adc <_free_r>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d5c:	e00d      	b.n	8000d7a <__sflush_r+0xae>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	4628      	mov	r0, r5
 8000d62:	47b0      	blx	r6
 8000d64:	4602      	mov	r2, r0
 8000d66:	1c50      	adds	r0, r2, #1
 8000d68:	d1c9      	bne.n	8000cfe <__sflush_r+0x32>
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0c6      	beq.n	8000cfe <__sflush_r+0x32>
 8000d70:	2b1d      	cmp	r3, #29
 8000d72:	d001      	beq.n	8000d78 <__sflush_r+0xac>
 8000d74:	2b16      	cmp	r3, #22
 8000d76:	d11e      	bne.n	8000db6 <__sflush_r+0xea>
 8000d78:	602f      	str	r7, [r5, #0]
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	e022      	b.n	8000dc4 <__sflush_r+0xf8>
 8000d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	e01b      	b.n	8000dbe <__sflush_r+0xf2>
 8000d86:	690f      	ldr	r7, [r1, #16]
 8000d88:	2f00      	cmp	r7, #0
 8000d8a:	d0f6      	beq.n	8000d7a <__sflush_r+0xae>
 8000d8c:	0793      	lsls	r3, r2, #30
 8000d8e:	680e      	ldr	r6, [r1, #0]
 8000d90:	bf08      	it	eq
 8000d92:	694b      	ldreq	r3, [r1, #20]
 8000d94:	600f      	str	r7, [r1, #0]
 8000d96:	bf18      	it	ne
 8000d98:	2300      	movne	r3, #0
 8000d9a:	eba6 0807 	sub.w	r8, r6, r7
 8000d9e:	608b      	str	r3, [r1, #8]
 8000da0:	f1b8 0f00 	cmp.w	r8, #0
 8000da4:	dde9      	ble.n	8000d7a <__sflush_r+0xae>
 8000da6:	6a21      	ldr	r1, [r4, #32]
 8000da8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000daa:	4643      	mov	r3, r8
 8000dac:	463a      	mov	r2, r7
 8000dae:	4628      	mov	r0, r5
 8000db0:	47b0      	blx	r6
 8000db2:	2800      	cmp	r0, #0
 8000db4:	dc08      	bgt.n	8000dc8 <__sflush_r+0xfc>
 8000db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dbe:	81a3      	strh	r3, [r4, #12]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dc8:	4407      	add	r7, r0
 8000dca:	eba8 0800 	sub.w	r8, r8, r0
 8000dce:	e7e7      	b.n	8000da0 <__sflush_r+0xd4>
 8000dd0:	dfbffffe 	.word	0xdfbffffe

08000dd4 <_fflush_r>:
 8000dd4:	b538      	push	{r3, r4, r5, lr}
 8000dd6:	690b      	ldr	r3, [r1, #16]
 8000dd8:	4605      	mov	r5, r0
 8000dda:	460c      	mov	r4, r1
 8000ddc:	b913      	cbnz	r3, 8000de4 <_fflush_r+0x10>
 8000dde:	2500      	movs	r5, #0
 8000de0:	4628      	mov	r0, r5
 8000de2:	bd38      	pop	{r3, r4, r5, pc}
 8000de4:	b118      	cbz	r0, 8000dee <_fflush_r+0x1a>
 8000de6:	6a03      	ldr	r3, [r0, #32]
 8000de8:	b90b      	cbnz	r3, 8000dee <_fflush_r+0x1a>
 8000dea:	f7ff fc8f 	bl	800070c <__sinit>
 8000dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0f3      	beq.n	8000dde <_fflush_r+0xa>
 8000df6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000df8:	07d0      	lsls	r0, r2, #31
 8000dfa:	d404      	bmi.n	8000e06 <_fflush_r+0x32>
 8000dfc:	0599      	lsls	r1, r3, #22
 8000dfe:	d402      	bmi.n	8000e06 <_fflush_r+0x32>
 8000e00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e02:	f7ff fe68 	bl	8000ad6 <__retarget_lock_acquire_recursive>
 8000e06:	4628      	mov	r0, r5
 8000e08:	4621      	mov	r1, r4
 8000e0a:	f7ff ff5f 	bl	8000ccc <__sflush_r>
 8000e0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e10:	07da      	lsls	r2, r3, #31
 8000e12:	4605      	mov	r5, r0
 8000e14:	d4e4      	bmi.n	8000de0 <_fflush_r+0xc>
 8000e16:	89a3      	ldrh	r3, [r4, #12]
 8000e18:	059b      	lsls	r3, r3, #22
 8000e1a:	d4e1      	bmi.n	8000de0 <_fflush_r+0xc>
 8000e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e1e:	f7ff fe5b 	bl	8000ad8 <__retarget_lock_release_recursive>
 8000e22:	e7dd      	b.n	8000de0 <_fflush_r+0xc>

08000e24 <__swhatbuf_r>:
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	460c      	mov	r4, r1
 8000e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e2c:	2900      	cmp	r1, #0
 8000e2e:	b096      	sub	sp, #88	@ 0x58
 8000e30:	4615      	mov	r5, r2
 8000e32:	461e      	mov	r6, r3
 8000e34:	da0d      	bge.n	8000e52 <__swhatbuf_r+0x2e>
 8000e36:	89a3      	ldrh	r3, [r4, #12]
 8000e38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000e3c:	f04f 0100 	mov.w	r1, #0
 8000e40:	bf14      	ite	ne
 8000e42:	2340      	movne	r3, #64	@ 0x40
 8000e44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000e48:	2000      	movs	r0, #0
 8000e4a:	6031      	str	r1, [r6, #0]
 8000e4c:	602b      	str	r3, [r5, #0]
 8000e4e:	b016      	add	sp, #88	@ 0x58
 8000e50:	bd70      	pop	{r4, r5, r6, pc}
 8000e52:	466a      	mov	r2, sp
 8000e54:	f000 f848 	bl	8000ee8 <_fstat_r>
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	dbec      	blt.n	8000e36 <__swhatbuf_r+0x12>
 8000e5c:	9901      	ldr	r1, [sp, #4]
 8000e5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000e62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000e66:	4259      	negs	r1, r3
 8000e68:	4159      	adcs	r1, r3
 8000e6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e6e:	e7eb      	b.n	8000e48 <__swhatbuf_r+0x24>

08000e70 <__smakebuf_r>:
 8000e70:	898b      	ldrh	r3, [r1, #12]
 8000e72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e74:	079d      	lsls	r5, r3, #30
 8000e76:	4606      	mov	r6, r0
 8000e78:	460c      	mov	r4, r1
 8000e7a:	d507      	bpl.n	8000e8c <__smakebuf_r+0x1c>
 8000e7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000e80:	6023      	str	r3, [r4, #0]
 8000e82:	6123      	str	r3, [r4, #16]
 8000e84:	2301      	movs	r3, #1
 8000e86:	6163      	str	r3, [r4, #20]
 8000e88:	b003      	add	sp, #12
 8000e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e8c:	ab01      	add	r3, sp, #4
 8000e8e:	466a      	mov	r2, sp
 8000e90:	f7ff ffc8 	bl	8000e24 <__swhatbuf_r>
 8000e94:	9f00      	ldr	r7, [sp, #0]
 8000e96:	4605      	mov	r5, r0
 8000e98:	4639      	mov	r1, r7
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	f7ff fe8a 	bl	8000bb4 <_malloc_r>
 8000ea0:	b948      	cbnz	r0, 8000eb6 <__smakebuf_r+0x46>
 8000ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ea6:	059a      	lsls	r2, r3, #22
 8000ea8:	d4ee      	bmi.n	8000e88 <__smakebuf_r+0x18>
 8000eaa:	f023 0303 	bic.w	r3, r3, #3
 8000eae:	f043 0302 	orr.w	r3, r3, #2
 8000eb2:	81a3      	strh	r3, [r4, #12]
 8000eb4:	e7e2      	b.n	8000e7c <__smakebuf_r+0xc>
 8000eb6:	89a3      	ldrh	r3, [r4, #12]
 8000eb8:	6020      	str	r0, [r4, #0]
 8000eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ebe:	81a3      	strh	r3, [r4, #12]
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000ec6:	b15b      	cbz	r3, 8000ee0 <__smakebuf_r+0x70>
 8000ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ecc:	4630      	mov	r0, r6
 8000ece:	f000 f81d 	bl	8000f0c <_isatty_r>
 8000ed2:	b128      	cbz	r0, 8000ee0 <__smakebuf_r+0x70>
 8000ed4:	89a3      	ldrh	r3, [r4, #12]
 8000ed6:	f023 0303 	bic.w	r3, r3, #3
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	81a3      	strh	r3, [r4, #12]
 8000ee0:	89a3      	ldrh	r3, [r4, #12]
 8000ee2:	431d      	orrs	r5, r3
 8000ee4:	81a5      	strh	r5, [r4, #12]
 8000ee6:	e7cf      	b.n	8000e88 <__smakebuf_r+0x18>

08000ee8 <_fstat_r>:
 8000ee8:	b538      	push	{r3, r4, r5, lr}
 8000eea:	4d07      	ldr	r5, [pc, #28]	@ (8000f08 <_fstat_r+0x20>)
 8000eec:	2300      	movs	r3, #0
 8000eee:	4604      	mov	r4, r0
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	602b      	str	r3, [r5, #0]
 8000ef6:	f7ff faf4 	bl	80004e2 <_fstat>
 8000efa:	1c43      	adds	r3, r0, #1
 8000efc:	d102      	bne.n	8000f04 <_fstat_r+0x1c>
 8000efe:	682b      	ldr	r3, [r5, #0]
 8000f00:	b103      	cbz	r3, 8000f04 <_fstat_r+0x1c>
 8000f02:	6023      	str	r3, [r4, #0]
 8000f04:	bd38      	pop	{r3, r4, r5, pc}
 8000f06:	bf00      	nop
 8000f08:	200001b8 	.word	0x200001b8

08000f0c <_isatty_r>:
 8000f0c:	b538      	push	{r3, r4, r5, lr}
 8000f0e:	4d06      	ldr	r5, [pc, #24]	@ (8000f28 <_isatty_r+0x1c>)
 8000f10:	2300      	movs	r3, #0
 8000f12:	4604      	mov	r4, r0
 8000f14:	4608      	mov	r0, r1
 8000f16:	602b      	str	r3, [r5, #0]
 8000f18:	f7ff faf3 	bl	8000502 <_isatty>
 8000f1c:	1c43      	adds	r3, r0, #1
 8000f1e:	d102      	bne.n	8000f26 <_isatty_r+0x1a>
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	b103      	cbz	r3, 8000f26 <_isatty_r+0x1a>
 8000f24:	6023      	str	r3, [r4, #0]
 8000f26:	bd38      	pop	{r3, r4, r5, pc}
 8000f28:	200001b8 	.word	0x200001b8

08000f2c <_sbrk_r>:
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4d06      	ldr	r5, [pc, #24]	@ (8000f48 <_sbrk_r+0x1c>)
 8000f30:	2300      	movs	r3, #0
 8000f32:	4604      	mov	r4, r0
 8000f34:	4608      	mov	r0, r1
 8000f36:	602b      	str	r3, [r5, #0]
 8000f38:	f7ff fafc 	bl	8000534 <_sbrk>
 8000f3c:	1c43      	adds	r3, r0, #1
 8000f3e:	d102      	bne.n	8000f46 <_sbrk_r+0x1a>
 8000f40:	682b      	ldr	r3, [r5, #0]
 8000f42:	b103      	cbz	r3, 8000f46 <_sbrk_r+0x1a>
 8000f44:	6023      	str	r3, [r4, #0]
 8000f46:	bd38      	pop	{r3, r4, r5, pc}
 8000f48:	200001b8 	.word	0x200001b8

08000f4c <_init>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr

08000f58 <_fini>:
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	bf00      	nop
 8000f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5e:	bc08      	pop	{r3}
 8000f60:	469e      	mov	lr, r3
 8000f62:	4770      	bx	lr
